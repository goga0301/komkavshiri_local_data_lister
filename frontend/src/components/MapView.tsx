import React, { useState } from "react";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  Polygon,
  useMapEvents,
} from "react-leaflet";
import { ILocalItem } from "../types/ILocalItem";
import L from "leaflet";
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";

//  Custom icon for temporary marker (when placing a new item)
const tempMarkerIcon = new L.Icon({
  iconUrl: "https://cdn-icons-png.flaticon.com/512/684/684908.png",
  iconSize: [40, 41],
  iconAnchor: [12, 41],
});

//  Fix leaflet icon imports for default marker
delete (L.Icon.Default.prototype as any)._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

//  Utility: Check if point is inside polygon using ray-casting algorithm
function isPointInsidePolygon(point: [number, number], polygon: [number, number][]) {
  let x = point[1], y = point[0];
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    let xi = polygon[i][1], yi = polygon[i][0];
    let xj = polygon[j][1], yj = polygon[j][0];
    let intersect = yi > y !== yj > y &&
      x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }
  return inside;
}

//  Define Kutaisi's polygon boundary (used for item placement validation)
const kutaisiBoundary: [number, number][] = [
  [42.246640288470296, 42.636893729879944],
  [42.24435292169459, 42.627280692937774],
  [42.246131991909394, 42.612861137524526],
  [42.25553481532559, 42.60256145508649],
  [42.25629714498012, 42.5977549366154],
  [42.26188728087254, 42.599128227607146],
  [42.26188728087254, 42.604278068826154],
  [42.26468100806909, 42.605616204738396],
  [42.26517051183468, 42.60429329836469],
  [42.270554802408626, 42.605616204738396],
  [42.267617973652044, 42.617191635508306],
  [42.27071795554987, 42.6186247840798],
  [42.271207412439736, 42.61245122100252],
  [42.272104740199644, 42.61366388517842],
  [42.27161529027789, 42.62005793265132],
  [42.27088110826879, 42.62457786276148],
  [42.269902185620616, 42.62457786276148],
  [42.2696574525831, 42.63097191023437],
  [42.2703916488451, 42.631192394629984],
  [42.26998376308865, 42.636263535729185],
  [42.271207412439736, 42.637365957707274],
  [42.2709626844699, 42.64221661441085],
  [42.2703916488451, 42.64210637221305],
  [42.27047322567965, 42.6428780675977],
  [42.27071795554987, 42.64331903638894],
  [42.27019516216605, 42.645636777133696],
  [42.268518677767155, 42.64553057960745],
  [42.268518677767155, 42.64620316394032],
  [42.26796857160824, 42.64655715569446],
  [42.267889984622244, 42.6484687111668],
  [42.26702552130999, 42.64967228313087],
  [42.26705171734211, 42.65084045591953],
  [42.26990701961336, 42.65307060431726],
  [42.26948790077786, 42.662876175906874],
  [42.270064188458235, 42.66308857095936],
  [42.27181921393788, 42.66478773137922],
  [42.271635855352905, 42.66776126211397],
  [42.27401947538932, 42.670168406076606],
  [42.27378373676895, 42.67229235660143],
  [42.274595721682154, 42.674628702352386],
  [42.27467430030787, 42.67692964875428],
  [42.27697922974144, 42.679301393507],
  [42.27794832262487, 42.67951378855948],
  [42.278812636136735, 42.68092975557603],
  [42.279388838558546, 42.68043416712024],
  [42.28009598887507, 42.68114215062851],
  [42.281615025683685, 42.68333689950417],
  [42.28069836992225, 42.68386788713538],
  [42.27988646368271, 42.68524845497651],
  [42.28541245761962, 42.690558331670346],
  [42.28546483438905, 42.691726504459],
  [42.286040975978736, 42.692009697862304],
  [42.285517211114936, 42.70153207604861],
  [42.285464834414164, 42.70606317061858],
  [42.288581173894, 42.70680655334846],
  [42.28810980472017, 42.70921369727658],
  [42.28978576798012, 42.7131076065721],
  [42.290309497354244, 42.714452775237824],
  [42.28968102158276, 42.71586874225437],
  [42.28758605705682, 42.717355507621754],
  [42.28826692822723, 42.72039983705337],
  [42.29232581484607, 42.72146181231579],
  [42.293373226999925, 42.722842380156926],
  [42.29494431257087, 42.72868324410019],
  [42.29452536025072, 42.73441791051722],
  [42.29392311140784, 42.735727680007535],
  [42.285962411684515, 42.735055095674674],
  [42.28268880576211, 42.73763923547987],
  [42.28035789440946, 42.73686045373714],
  [42.270980999014206, 42.73774543312248],
  [42.270928610204805, 42.73686045373714],
  [42.272081153953174, 42.7360108735272],
  [42.27221212350019, 42.73406391887944],
  [42.2704047197159, 42.73498429744021],
  [42.267994767307826, 42.73282494765191],
  [42.26762726918892, 42.730625673302995],
  [42.2635222923859, 42.72787490632585],
  [42.262134278660156, 42.728250010902286],
  [42.25841593382796, 42.72737476687158],
  [42.255185338586855, 42.73045517119425],
  [42.25251829020455, 42.72985273050688],
  [42.251752649814875, 42.725976649779284],
  [42.25224064144269, 42.723976091979154],
  [42.25039508816781, 42.72253246337252],
  [42.24828317326066, 42.722657498232984],
  [42.243941325221286, 42.72713601966157],
  [42.243108262086984, 42.7267381814692],
  [42.24251904785302, 42.72523352184878],
  [42.238185218638904, 42.724210509345596],
  [42.23836194368444, 42.721061904190925],
  [42.236661996279004, 42.72192578140982],
  [42.23151979747312, 42.72701811030895],
  [42.229499833875785, 42.72393770601747],
  [42.22859924592011, 42.72191441459546],
  [42.22321228354691, 42.720061625290676],
  [42.222431106140796, 42.717917860861824],
  [42.2207896543854, 42.71856576877511],
  [42.21952697010666, 42.717144918071114],
  [42.21840736896644, 42.717667791123944],
  [42.21830635133652, 42.7223509151041],
  [42.216083922755935, 42.72123696814867],
  [42.215654580923136, 42.71866807006105],
  [42.2119503343397, 42.71844073394518],
  [42.21137784043837, 42.720441291730296],
  [42.207235524405284, 42.72324889273924],
  [42.20732814010073, 42.72415823723759],
  [42.20477694823935, 42.72835258846572],
  [42.20529056276813, 42.72985300688312],
  [42.20366550567011, 42.731558027707564],
  [42.20285717154705, 42.73306981283857],
  [42.20017949084093, 42.73246737214392],
  [42.20023001415799, 42.72952336947119],
  [42.197274331542964, 42.719804750619254],
  [42.19720283162719, 42.712799937556476],
  [42.19961065633164, 42.7046252670033],
  [42.198827532536235, 42.70066961861038],
  [42.204023671902526, 42.69126834104609],
  [42.20894351496423, 42.691704669962675],
  [42.21052352921063, 42.69114713846303],
  [42.21339618118647, 42.6929651759602],
  [42.215927597392465, 42.6952922639587],
  [42.21828664002952, 42.69458220935516],
  [42.218250735467336, 42.68864328685895],
  [42.226315734882576, 42.69046854051059],
  [42.22849376469874, 42.67645915440217],
  [42.2278655334263, 42.67454415487004],
  [42.22660905224277, 42.675101686369686],
  [42.22519099344019, 42.673986623370396],
  [42.223880606990484, 42.67226554787149],
  [42.22208551291212, 42.67197466187167],
  [42.22262404649453, 42.66940516887331],
  [42.223539543022454, 42.67015662431926],
  [42.2236651983754, 42.666762954321435],
  [42.2246524817323, 42.666544789821565],
  [42.224921738150194, 42.66542972682228],
  [42.22468838265437, 42.66521156232242],
  [42.22495763891914, 42.664193461323066],
  [42.22725524568976, 42.665405486289416],
  [42.227775785600215, 42.66344200579067],
  [42.22748859169765, 42.66186637329168],
  [42.22784758387171, 42.66126036079206],
  [42.228493764684416, 42.66196333527179],
  [42.23118611335538, 42.663708651270674],
  [42.23176185439168, 42.66159997122744],
  [42.232880617930206, 42.661366457111974],
  [42.23319590224996, 42.662108207828666],
  [42.23353152576293, 42.66214941620182],
  [42.23470144241076, 42.65907099653924],
  [42.23366984924688, 42.65814473458889],
  [42.233583402126655, 42.65798906031385],
  [42.23360069156017, 42.65763879319505],
  [42.23372748059455, 42.65715620294245],
  [42.23394071612346, 42.656751449827375],
  [42.234228871098985, 42.65653350584234],
  [42.23513366919251, 42.65680593580131],
  [42.23535842594697, 42.655817404139164],
  [42.23753103324967, 42.65404271738083],
  [42.2384300212917, 42.65571621584552],
  [42.239138829767654, 42.65847165056534],
  [42.24052933887373, 42.65896626486444],
  [42.24099610054575, 42.66230547808974],
  [42.247696239956326, 42.65595225258639],
  [42.24849713292664, 42.65667613796638],
  [42.24895807392252, 42.657337753643006],
  [42.24918854314858, 42.65692521681418],
  [42.24985113748303, 42.65726770021924],
  [42.24951119865538, 42.658583147858415],
  [42.250098888374716, 42.658559796719594],
  [42.25031783020764, 42.658232880742595],
  [42.25125120526415, 42.65849752701138],
  [42.25140100491862, 42.65982854208402],
  [42.25080756576946, 42.66105836885675],
  [42.25129153598899, 42.661525391712736],
  [42.25209814478251, 42.66066918319682],
  [42.25408581521394, 42.66048237406679],
  [42.255019134531956, 42.659579463257],
  [42.25081393523022, 42.648990481479046],
  [42.24971922711562, 42.6495586925829],
  [42.247859024174325, 42.64499905245242],
  [42.25005424765257, 42.644127276498175],
  [42.2500081545073, 42.64358241653558],
  [42.250906888098456, 42.64134200790568],
  [42.25269499543192, 42.64104004313243],
  [42.25263911784507, 42.637567448240034],
  [42.246324631688, 42.63741646563938],
];

//  Define map constraint bounds to prevent panning too far outside Kutaisi
const kutaisiBounds = L.latLngBounds(
  [42.1856, 42.5853],
  [42.3004, 42.7495]
);

//  Polygon to darken everything outside of the main city area
const outerBounds: [number, number][] = [
  [90, -180],
  [90, 180],
  [-90, 180],
  [-90, -180],
];

//  Props passed to MapView
type Props = {
  items: ILocalItem[];
  onSelectItem: (item: ILocalItem) => void;
  onRequestAddItem: (coords: { lat: number; lng: number }) => void;
};

/**
 * MapClickHandler Component
 * -------------------------
 * Handles click interactions on the map.
 * If the click is inside the Kutaisi boundary, it sets a temporary marker for potential item placement.
 */
function MapClickHandler({
  onRequestAddItem,
  setTempMarker,
}: {
  onRequestAddItem: Props["onRequestAddItem"];
  setTempMarker: React.Dispatch<
    React.SetStateAction<{ lat: number; lng: number } | null>
  >;
}) {
  useMapEvents({
    click(e) {
      const clickedPoint: [number, number] = [e.latlng.lat, e.latlng.lng];
      if (isPointInsidePolygon(clickedPoint, kutaisiBoundary)) {
        setTempMarker({ lat: e.latlng.lat, lng: e.latlng.lng });
      } else {
        alert("Selected location is outside of Kutaisi boundary.");
      }
    },
  });
  return null;
}

/**
 * MapView Component
 * -----------------
 * Main map UI powered by Leaflet.
 * Displays all item markers, allows selecting them, and handles new item placement.
 */
export default function MapView({
  items,
  onSelectItem,
  onRequestAddItem,
}: Props) {
  const [tempMarker, setTempMarker] = useState<{
    lat: number;
    lng: number;
  } | null>(null);

  return (
    <MapContainer
      center={[42.267, 42.7]}                  // Initial center of Kutaisi
      zoom={13}
      minZoom={12}
      maxBounds={kutaisiBounds}               // Limit panning to Kutaisi bounds
      style={{ height: "100vh", width: "100%" }}
      zoomControl={true}
    >
      {/* Base map tiles */}
      <TileLayer
        attribution=""
        url="https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png"
      />

      {/* Click logic and temporary marker placement */}
      <MapClickHandler
        onRequestAddItem={onRequestAddItem}
        setTempMarker={setTempMarker}
      />

      {/* Show confirmation popup if user clicked a valid location */}
      {tempMarker && (
        <Marker
          position={[tempMarker.lat, tempMarker.lng]}
          icon={tempMarkerIcon}
        >
          <Popup>
            <div>
              <strong>Add new item here?</strong>
              <br />
              <button
                onClick={() => {
                  onRequestAddItem(tempMarker); // Send coordinates to parent
                  setTempMarker(null);         // Clear temporary marker
                }}
                style={{
                  color: "white",
                  backgroundColor: "green",
                  border: "none",
                  borderRadius: "2px",
                  cursor: "pointer",
                }}
              >
                Yes
              </button>{" "}
              <button
                onClick={() => setTempMarker(null)}
                style={{
                  color: "white",
                  backgroundColor: "red",
                  border: "none",
                  borderRadius: "2px",
                  cursor: "pointer",
                }}
              >
                No
              </button>
            </div>
          </Popup>
        </Marker>
      )}

      {/* Display all real item markers */}
      {items.map(
        (item) =>
          item.coordinates && (
            <Marker
              key={item.id}
              position={[item.coordinates.lat, item.coordinates.lng]}
              eventHandlers={{ click: () => onSelectItem(item) }}
            >
              <Popup>
                <strong>{item.name}</strong>
                <br />
                {item.description}
              </Popup>
            </Marker>
          )
      )}

      {/* City boundary outline */}
      <Polygon
        positions={kutaisiBoundary}
        pathOptions={{ color: "#037D50", weight: 3, fill: false }}
      />

      {/* Darken everything outside city boundary */}
      <Polygon
        positions={[outerBounds, kutaisiBoundary]}
        pathOptions={{
          fillColor: "rgba(0,0,0,0.7)",
          fillRule: "evenodd",
          color: "transparent",
        }}
      />
    </MapContainer>
  );
}
